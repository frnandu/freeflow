import java.util.Base64

plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}


def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
} 

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def getKeystoreFile(String base64String, String fileName) {
    def decodedBytes = Base64.getDecoder().decode(base64String)
    def tempFile = new File("${buildDir}/keystores/${fileName}")
    tempFile.parentFile.mkdirs()
    tempFile.bytes = decodedBytes
    return tempFile
}

android {
    signingConfigs {
        env {
            keyAlias System.getenv("KEY_ALIAS")
            keyPassword System.getenv("KEY_PASSWORD")
            storeFile getKeystoreFile(System.getenv("KEYSTORE"), "store.jks")
            storePassword System.getenv("KEYSTORE_PASSWORD")
        }
        keyfile {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
}

def getSigningConfig() {
    if(System.getenv("KEYSTORE")) {
        println "Signing: using env vars"
        return android.signingConfigs.env
    }
    println "Signing: using key.properties"
    return android.signingConfigs.keyfile
}

// pick signing config
def cfg = getSigningConfig()
if (cfg == null) {
    throw new GradleException("Signing config is null!")
}

android {
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "io.nostrlabs.freeflow"
        minSdkVersion 31
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    buildTypes {
        release {
            signingConfig cfg
        }
    }
    namespace 'io.nostrlabs.freeflow'
}

flutter {
    source '../..'
}